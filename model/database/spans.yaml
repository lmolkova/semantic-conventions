groups:
  - id: trace.db.common.minimal
    extends: attributes.db.client.minimal
    type: attribute_group
    stability: experimental
    brief: This group defines the attributes used to perform database client calls.
    attributes:
      # TODO: add db.system once https://github.com/open-telemetry/build-tools/issues/192 is possible
      # - ref: db.system
      #   sampling_relevant: true
      - ref: db.operation.name
        sampling_relevant: true
        requirement_level:  # TODO (trask) simplify
          conditionally_required: >
            If readily available and if there is a single operation name that describes the
            database call. The operation name MAY be parsed from the query text,
            in which case it SHOULD be the single operation name found in the query.
      - ref: db.operation.batch.size
      - ref: server.address
        sampling_relevant: true
      - ref: server.port
        sampling_relevant: true

  - id: trace.db.common.query
    extends: attributes.db.client.with_query
    type: attribute_group
    stability: experimental
    brief: This group defines the attributes used to perform database client calls.
    attributes:
      - ref: server.address
        sampling_relevant: true
      - ref: server.port
        sampling_relevant: true
      - ref: db.operation.batch.size
      - ref: db.response.returned_rows
      - ref: db.query.text
        sampling_relevant: true
        requirement_level:
          recommended: >
            Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes
            sensitive data, e.g. by redacting all literal values present in the query text.
            See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).

            Parameterized query text SHOULD be collected by default
            (the query parameter values themselves are opt-in,
            see [`db.operation.parameter.<key>`](../../docs/attributes-registry/db.md)).
      - ref: db.query.summary
        sampling_relevant: true
      - ref: db.operation.parameter
        requirement_level: opt_in

  - id: trace.db.common.query_and_collection
    extends: attributes.db.client.with_query_and_collection
    type: attribute_group
    stability: experimental
    brief: This group defines the attributes used to perform database client calls.
    attributes:
      - ref: db.collection.name
        sampling_relevant: true
      - ref: db.operation.name
        sampling_relevant: true
      - ref: db.operation.batch.size
      - ref: server.address
        sampling_relevant: true
      - ref: server.port
        sampling_relevant: true
      - ref: db.response.returned_rows
      - ref: db.query.text
        sampling_relevant: true
        requirement_level:
          recommended: >
            Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes
            sensitive data, e.g. by redacting all literal values present in the query text.
            See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).

            Parameterized query text SHOULD be collected by default
            (the query parameter values themselves are opt-in,
            see [`db.operation.parameter.<key>`](../../docs/attributes-registry/db.md)).
      - ref: db.query.summary
        sampling_relevant: true
      - ref: db.operation.parameter
        requirement_level: opt_in

  - id: trace.db.common.full
    type: attribute_group
    stability: experimental
    brief: This group documents attributes that describe database call along with network information.
    extends: trace.db.common.query_and_collection
    attributes:
      - ref: network.peer.address
        brief: Peer address of the database node where the operation was performed.
        requirement_level:
          recommended: If applicable for this database system.
        note: >
          Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable.
          Network peer address and port are useful when the application interacts with individual database nodes directly.

          If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
      - ref: network.peer.port
        requirement_level:
          recommended: if and only if `network.peer.address` is set.
      - ref: db.system
        sampling_relevant: true
        # TODO: Not adding to the minimal because of https://github.com/open-telemetry/build-tools/issues/192
        requirement_level: required
      - ref: db.namespace
        sampling_relevant: true
        requirement_level:
          conditionally_required: If available.

  - id: span.db.client
    type: span
    stability: experimental
    brief: This span defines the attributes used to perform database client calls.
    span_kind: client
    extends: trace.db.common.full

  - id: span.db.mssql.client
    type: span
    stability: experimental
    extends: span.db.sql.client
    span_kind: client
    brief: >
      Attributes for Microsoft SQL Server
    attributes:
      - ref: db.namespace
        sampling_relevant: true
        brief: >
          The database associated with the connection, qualified by the instance name.
        note: |
          When connected to a default instance, `db.namespace` SHOULD be set to the name of
          the database. When connected to a [named instance](https://learn.microsoft.com/sql/connect/jdbc/building-the-connection-url#named-and-multiple-sql-server-instances),
          `db.namespace` SHOULD be set to the combination of instance and database name following the `{instance_name}.{database_name}` pattern.

          A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.

          If instrumentation is unable to capture the connection's currently associated database on each query
          without triggering an additional query to be executed (e.g. `SELECT DB_NAME()`),
          then it is RECOMMENDED to fallback and use the database provided when the connection was established.

          Instrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.

          It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
        examples: ["instance1.products", "customers"]
      - ref: db.response.status_code
        brief: >
          [Microsoft SQL Server error](https://learn.microsoft.com/sql/relational-databases/errors-events/database-engine-events-and-errors) number
          represented as a string.
        note: >
          Microsoft SQL Server does not report SQLSTATE.
        examples: ["102", "40020"]

  - id: span.db.postgresql.client
    type: span
    stability: experimental
    extends: span.db.sql.client
    span_kind: client
    brief: >
      Attributes for PostgreSQL
    attributes:
      - ref: db.namespace
        sampling_relevant: true
        brief: >
          The schema associated with the connection, qualified by the database name.
        note: |
          `db.namespace` SHOULD be set to the combination of database and schema name following the `{database}.{schema}` pattern.

          A connection's currently associated database may change during its lifetime, e.g. from executing `SET search_path TO <schema>`.
          If the search path has multiple schemas, the first schema in the search path SHOULD be used.

          If instrumentation is unable to capture the connection's currently associated schema on each query
          without triggering an additional query to be executed (e.g. `SELECT current_schema()`),
          then it is RECOMMENDED to fallback and use the schema provided when the connection was established.

          Instrumentation SHOULD document if `db.namespace` reflects the schema provided when the connection was established.

          Instrumentation MAY use the user name when the connection was established as a stand-in for the schema name.

          Instrumentation SHOULD document if `db.namespace` reflects the user provided when the connection was established.

          It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
        examples: ["mydatabase.products", "mydatabase.customers"]
      - ref: db.response.status_code
        brief: >
          [PostgreSQL error code](https://www.postgresql.org/docs/current/errcodes-appendix.html).
        examples: ["08000", "08P01"]

  - id: span.db.mysql.client
    type: span
    stability: experimental
    extends: span.db.sql.client
    span_kind: client
    brief: >
      Attributes for MySQL
    attributes:
      - ref: db.namespace
        sampling_relevant: true
        brief: The database associated with the connection.
        note: |
          A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.

          If instrumentation is unable to capture the connection's currently associated database on each query
          without triggering an additional query to be executed (e.g. `SELECT DATABASE()`),
          then it is RECOMMENDED to fallback and use the database provided when the connection was established.

          Instrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.

          It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
        examples: ["products", "customers"]
      - ref: db.response.status_code
        brief: >
          [MySQL error number](https://dev.mysql.com/doc/mysql-errors/9.0/en/error-reference-introduction.html).
        examples: ["1005", "MY-010016"]

  - id: span.db.mariadb.client
    type: span
    stability: experimental
    extends: span.db.sql.client
    span_kind: client
    brief: >
      Attributes for MariaDB
    attributes:
      - ref: db.namespace
        sampling_relevant: true
        brief: The database associated with the connection.
        note: |
          A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.

          If instrumentation is unable to capture the connection's currently associated database on each query
          without triggering an additional query to be executed (e.g. `SELECT DATABASE()`),
          then it is RECOMMENDED to fallback and use the database provided when the connection was established.

          Instrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.

          It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
        examples: ["products", "customers"]
      - ref: db.response.status_code
        brief: >
          [Maria DB error code](https://mariadb.com/kb/en/mariadb-error-code-reference/)
          represented as a string.
        examples: ["1008", "3058"]

  - id: span.db.hbase.client
    type: span
    span_kind: client
    stability: experimental
    extends: trace.db.common.minimal
    brief: >
      Attributes for HBase
    attributes:
      - ref: db.namespace
        sampling_relevant: true
        brief: The HBase namespace.
        requirement_level:
          conditionally_required: If applicable.
        examples: ['mynamespace']
      - ref: db.collection.name
        sampling_relevant: true
        brief: The HBase table name.
        requirement_level:
          conditionally_required: If applicable.
        note: >
          If table name includes the namespace, the `db.collection.name` SHOULD be set to the full table name.
        examples: ['mytable', 'ns:table']
      - ref: db.operation.name
        requirement_level:
          conditionally_required: If readily available.
      - ref: db.response.status_code
        brief: >
          Protocol-specific response code recorded as string.
        examples: ["200", "409", "14"]
        requirement_level:
          conditionally_required: If response was received.
  - id: span.db.couchdb.client
    type: span
    span_kind: client
    stability: experimental
    extends: trace.db.common.minimal
    brief: >
      Attributes for CouchDB
    attributes:
      - ref: db.operation.name
        sampling_relevant: true
        brief: >
          The HTTP method + the target REST route.
        examples: ['GET /{db}/{docid}']
        note: >
          In **CouchDB**, `db.operation.name` should be set to the HTTP method +
          the target REST route according to the API reference documentation.
          For example, when retrieving a document, `db.operation.name` would be set to
          (literally, i.e., without replacing the placeholders with concrete values):
          [`GET /{db}/{docid}`](https://docs.couchdb.org/en/stable/api/document/common.html#get--db-docid).
        requirement_level:
          conditionally_required: If readily available.
      - ref: db.namespace
        sampling_relevant: true
        requirement_level:
          conditionally_required: If available.
        note: ""  # overriding the base note
      - ref: db.response.status_code
        brief: >
          The HTTP response code returned by the Couch DB.
        examples: ["200", "201", "429"]
        requirement_level:
          conditionally_required: If response was received and the HTTP response code is available.

  - id: span.db.redis.client
    type: span
    stability: experimental
    span_kind: client
    extends: trace.db.common.minimal
    brief: >
      Attributes for Redis
    attributes:
      - ref: db.namespace
        sampling_relevant: true
        brief: >
          The [database index] associated with the connection, represented as a string.
        requirement_level:
          conditionally_required: If and only if it can be captured reliably.
        note: |
          A connection's currently associated database index may change during its lifetime, e.g. from executing `SELECT <index>`.

          If instrumentation is unable to capture the connection's currently associated database index on each query
          without triggering an additional query to be executed,
          then it is RECOMMENDED to fallback and use the database index provided when the connection was established.

          Instrumentation SHOULD document if `db.namespace` reflects the database index provided when the connection was established.
        examples: ["0", "1", "15"]
      - ref: db.operation.name
        sampling_relevant: true
      - ref: db.query.text
        sampling_relevant: true
        brief: >
          The full syntax of the Redis CLI command.
        examples: ["HMSET myhash field1 'Hello' field2 'World'"]
        requirement_level:
          recommended: >
            Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes
            sensitive data, e.g. by redacting all literal values present in the query text.

            See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).

            Parameterized query text SHOULD be collected by default
            (the query parameter values themselves are opt-in,
            see [`db.operation.parameter.<key>`](../../docs/attributes-registry/db.md)).
        note: >
          For **Redis**, the value provided for `db.query.text` SHOULD correspond to the syntax of the Redis CLI.
          If, for example, the [`HMSET` command](https://redis.io/commands/hmset) is invoked, `"HMSET myhash field1 'Hello' field2 'World'"` would be a suitable value for `db.query.text`.
      - ref: network.peer.address
        brief: Peer address of the database node where the operation was performed.
        requirement_level:
          recommended
        note: >
          If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
      - ref: network.peer.port
        requirement_level:
          recommended: if and only if `network.peer.address` is set.
      - ref: db.response.status_code
        brief: >
          The Redis [simple error](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-errors) prefix.
        examples: ["ERR", "WRONGTYPE", "CLUSTERDOWN"]
      - ref: db.operation.batch.size
      - ref: db.operation.parameter
        requirement_level: opt_in
      - ref: server.address
        sampling_relevant: true
      - ref: server.port
        sampling_relevant: true

  - id: span.db.mongodb.client
    type: span
    stability: experimental
    span_kind: client
    extends: trace.db.common.minimal
    brief: >
      Attributes for MongoDB
    attributes:
      - ref: db.operation.name
        sampling_relevant: true
        brief: >
          The name of the command being executed.
        note: >
          See [MongoDB database commands](https://www.mongodb.com/docs/manual/reference/command/).
        examples: ['findAndModify', 'getMore', 'update']
        requirement_level:
          conditionally_required: If readily available.
      - ref: db.collection.name
        sampling_relevant: true
        brief:
          The MongoDB collection being accessed within the database stated in `db.namespace`.
        requirement_level: required
      - ref: db.namespace
        sampling_relevant: true
        brief: The MongoDB database name.
        requirement_level:
          conditionally_required: If available.
        note: ""  # overriding the base note
      - ref: db.response.status_code
        brief: >
          [MongoDB error code](https://www.mongodb.com/docs/manual/reference/error-codes/) represented as a string.
        requirement_level:
          conditionally_required: If the operation failed and error code is available.
        examples: ["36", "11602"]

  - id: span.db.sql.client
    type: span
    span_kind: client
    stability: experimental
    extends: trace.db.common.query
    brief: >
      Attributes for SQL databases
    attributes:
      - ref: db.namespace
        brief: >
          The database associated with the connection,
          fully qualified within the server address and port.
        requirement_level:
          conditionally_required: If available without an additional network call.
        note: |
          If a database system has multiple namespace components (e.g. schema name and database name), they SHOULD be concatenated
          (potentially using database system specific conventions) from most general to most
          specific namespace component, and more specific namespaces SHOULD NOT be captured without
          the more general namespaces, to ensure that "startswith" queries for the more general namespaces will be valid.

          Unless specified by the system-specific semantic convention, the `db.namespace` attribute matches
          the name of the database being accessed.

          A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.

          If instrumentation is unable to capture the connection's currently associated database on each query
          without triggering an additional query to be executed (e.g. `SELECT DATABASE()`),
          then it is RECOMMENDED to fallback and use the database provided when the connection was established.

          Instrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.

          It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
      - ref: db.response.status_code
        brief: >
          Database response code recorded as string.
        note: |
          SQL defines [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE) as a database
          return code which is adopted by some database systems like PostgreSQL.
          See [PostgreSQL error codes](https://www.postgresql.org/docs/current/errcodes-appendix.html)
          for the details.

          Other systems like MySQL, Oracle, or MS SQL Server define vendor-specific
          error codes. Database SQL drivers usually provide access to both properties.
          For example, in Java, the [`SQLException`](https://docs.oracle.com/javase/8/docs/api/java/sql/SQLException.html)
          class reports them with `getSQLState()` and `getErrorCode()` methods.

          Instrumentations SHOULD populate the `db.response.status_code` with the
          the most specific code available to them.

          Here's a non-exhaustive list of databases that report vendor-specific
          codes with granularity higher than SQLSTATE (or don't report SQLSTATE
          at all):

          - [DB2 SQL codes](https://www.ibm.com/docs/db2-for-zos/12?topic=codes-sql).
          - [Maria DB error codes](https://mariadb.com/kb/en/mariadb-error-code-reference/)
          - [Microsoft SQL Server errors](https://docs.microsoft.com/sql/relational-databases/errors-events/database-engine-events-and-errors)
          - [MySQL error codes](https://dev.mysql.com/doc/mysql-errors/9.0/en/error-reference-introduction.html)
          - [Oracle error codes](https://docs.oracle.com/cd/B28359_01/server.111/b28278/toc.htm)
          - [SQLite result codes](https://www.sqlite.org/rescode.html)

          These systems SHOULD set the `db.response.status_code` to a
          known vendor-specific error code. If only SQLSTATE is available,
          it SHOULD be used.

          When multiple error codes are available and specificity is unclear,
          instrumentation SHOULD set the `db.response.status_code` to the
          concatenated string of all codes with '/' used as a separator.

          For example, generic DB instrumentation that detected an error and has
          SQLSTATE `"42000"` and vendor-specific `1071` should set
          `db.response.status_code` to `"42000/1071"`."

        examples: ["ORA-17027", "1052", "2201B"]
        requirement_level:
          conditionally_required: If response has ended with warning or an error.
